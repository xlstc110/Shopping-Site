spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order-service
spring.datasource.username=root
spring.datasource.password=Zechion110!
spring.jpa.hibernate.ddl-auto=update

##run this application on an available ramdon port
server.port=0
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name=order-service

##enable circuit breaker in actuator
management.health.circuitbreakers.enabled=true
##actuator will now expose all endpoints, defautly it will only expose the health metrics endpoint
management.endpoints.web.exposure.include=*
##show-details is by default set to "Never", set it to "always"
management.endpoint.health.show-details=always

##Resilien4J service not available properties
##register health indicator to see the states of circuit breaker
resilience4j.circuitbreaker.instances.inventory.register-health-indicator=true
##how much buffer size it is going to take
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
##condition type to change a state from one to another(closed to open), set to failed request count.
resilience4j.circuitbreaker.instances.inventory.sliding-window-type=Count_Based
##the window size of failed request count, set to 5(state change to open after 5 failed request)
resilience4j.circuitbreaker.instances.inventory..sliding-window-size=5
##failture rate threshold percentage, set to 50%.
resilience4j.circuitbreaker.instances.inventory.failure-rate-threshold=50
##retry wait time after a state is changed to open.(change to the half-open state and retry request after 5 second)
resilience4j.circuitbreaker.instances.inventory.wait-duration-in-open-state=5S
##how many calls are permitted to try if the service is working or not, set to 3.(if the request failed again, change the state back to open for another 5 second)
resilience4j.circuitbreaker.instances.inventory.permitted-number-of-calls-in-half-open-state=3
##automatic transfer the state from Open to Half-Open and start to retry request.
resilience4j.circuitbreaker.instances.inventory.automatic-transition-from-open-to-half-open-enabled=true

##Resilien4J service time out(slow response) available properties
##Set the request respond wait time to 3 second before terminate and throw timeout exception.
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

##Resilience4J Retry properties
##Set a max-attempts trys
resilience4j.retry.instances.inventory.max-attempts=3
##Set up how long it will wait then start attempt a retry, in this case, 5 second before the previous attempt
##After all attemps are gone, the circuit breaker will handle the request flow.
resilience4j.retry.instances.inventory.wait-duration=5s

##zipkin's port
spring.zipkin.base-url=http://localhost:9411
##Send 100% of the request that received in the system to Zipkin
management.tracing.sampling.probability=1.0